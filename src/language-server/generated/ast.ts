/******************************************************************************
 * This file was generated by langium-cli 0.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode, TypeMetaData } from 'langium';

export type DataType = string;

export type Direction = 'in' | 'out';

export type WireTargetExpression = BinaryWireTargetExpression | WireTargetFactor;

export const WireTargetExpression = 'WireTargetExpression';

export function isWireTargetExpression(item: unknown): item is WireTargetExpression {
    return reflection.isInstance(item, WireTargetExpression);
}

export type WireTargetFactor = BinaryWireTargetExpression | WireTargetPrimary;

export const WireTargetFactor = 'WireTargetFactor';

export function isWireTargetFactor(item: unknown): item is WireTargetFactor {
    return reflection.isInstance(item, WireTargetFactor);
}

export interface BinaryWireTargetExpression extends AstNode {
    readonly $container: BinaryWireTargetExpression | WireDefinition;
    left: WireTargetFactor | WireTargetPrimary
    op: '*' | '+' | '-' | '/' | 'div' | 'mod'
    right: WireTargetFactor | WireTargetPrimary
}

export const BinaryWireTargetExpression = 'BinaryWireTargetExpression';

export function isBinaryWireTargetExpression(item: unknown): item is BinaryWireTargetExpression {
    return reflection.isInstance(item, BinaryWireTargetExpression);
}

export interface File extends AstNode {
    modules: Array<ModuleDefinition>
}

export const File = 'File';

export function isFile(item: unknown): item is File {
    return reflection.isInstance(item, File);
}

export interface ModuleDefinition extends AstNode {
    readonly $container: File;
    links: Array<WireDefinition>
    modules: Array<ModuleInstance>
    name: string
    ports: Array<PortDefinition>
}

export const ModuleDefinition = 'ModuleDefinition';

export function isModuleDefinition(item: unknown): item is ModuleDefinition {
    return reflection.isInstance(item, ModuleDefinition);
}

export interface ModuleInstance extends AstNode {
    readonly $container: ModuleDefinition;
    module: Reference<ModuleDefinition>
    name: string
}

export const ModuleInstance = 'ModuleInstance';

export function isModuleInstance(item: unknown): item is ModuleInstance {
    return reflection.isInstance(item, ModuleInstance);
}

export interface PortDefinition extends AstNode {
    readonly $container: ModuleDefinition;
    direction: Direction
    name: string
    type: DataType
}

export const PortDefinition = 'PortDefinition';

export function isPortDefinition(item: unknown): item is PortDefinition {
    return reflection.isInstance(item, PortDefinition);
}

export interface WireDefinition extends AstNode {
    readonly $container: ModuleDefinition;
    source: WireTargetExpression
    target: WireTargetExpression
}

export const WireDefinition = 'WireDefinition';

export function isWireDefinition(item: unknown): item is WireDefinition {
    return reflection.isInstance(item, WireDefinition);
}

export interface WireTargetPrimary extends AstNode {
    readonly $container: BinaryWireTargetExpression | WireDefinition;
    instanceRef?: Reference<ModuleInstance>
    number?: string
    portRef?: Reference<PortDefinition>
    string?: string
}

export const WireTargetPrimary = 'WireTargetPrimary';

export function isWireTargetPrimary(item: unknown): item is WireTargetPrimary {
    return reflection.isInstance(item, WireTargetPrimary);
}

export type BifrostAstType = 'BinaryWireTargetExpression' | 'File' | 'ModuleDefinition' | 'ModuleInstance' | 'PortDefinition' | 'WireDefinition' | 'WireTargetExpression' | 'WireTargetFactor' | 'WireTargetPrimary';

export type BifrostAstReference = 'ModuleInstance:module' | 'WireTargetPrimary:instanceRef' | 'WireTargetPrimary:portRef';

export class BifrostAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['BinaryWireTargetExpression', 'File', 'ModuleDefinition', 'ModuleInstance', 'PortDefinition', 'WireDefinition', 'WireTargetExpression', 'WireTargetFactor', 'WireTargetPrimary'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case BinaryWireTargetExpression: {
                return this.isSubtype(WireTargetExpression, supertype) || this.isSubtype(WireTargetFactor, supertype);
            }
            case WireTargetPrimary: {
                return this.isSubtype(WireTargetFactor, supertype);
            }
            case WireTargetFactor: {
                return this.isSubtype(WireTargetExpression, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: BifrostAstReference): string {
        switch (referenceId) {
            case 'ModuleInstance:module': {
                return ModuleDefinition;
            }
            case 'WireTargetPrimary:instanceRef': {
                return ModuleInstance;
            }
            case 'WireTargetPrimary:portRef': {
                return PortDefinition;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'File': {
                return {
                    name: 'File',
                    mandatory: [
                        { name: 'modules', type: 'array' }
                    ]
                };
            }
            case 'ModuleDefinition': {
                return {
                    name: 'ModuleDefinition',
                    mandatory: [
                        { name: 'links', type: 'array' },
                        { name: 'modules', type: 'array' },
                        { name: 'ports', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new BifrostAstReflection();
