datatype List<a> {
  Nil,
  Cons a List<a>
}

abstract node MapFunction<a, b>(
  in input of a,
  out result of b
) {}

node Map<a, b>(
  in input of List<a>,
  in function of MapFunction<a, b>,
  out result of List<b>
) {
  match this.input with {
    case Nil {
      link Nil to this.result;
    }
    case Cons x? xs? {
      instance mapRest of Map<a, b>;
      instance call of this.function;
      link x to this.call.input;
      link xs to this.mapRest.input;
      link this.function to this.mapRest.function;
      link Cons (this.call.result) (this.mapRest.result) to this.result;
    }
  }
}
